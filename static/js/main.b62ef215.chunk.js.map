{"version":3,"sources":["components/Form/Form.js","components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","counter","onSubmitHandler","event","preventDefault","target","name","value","alert","job","props","changeValue","count","setState","onSubmit","this","className","for","type","class","Component","Table","employeeList","length","map","employee","key","id","onClick","deleteHandle","App","employees","submitValueHandler","emp","arr","push","deleteButtonHandler","index","findIndex","empArray","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAGqBA,G,uNACnBC,MAAQ,CACNC,QAAS,G,EAGXC,gBAAkB,SAACC,GAEjB,GADAA,EAAMC,iBAC0B,KAA5BD,EAAME,OAAOC,KAAKC,MAAcC,MAAM,6BACrC,GAA+B,KAA3BL,EAAME,OAAOI,IAAIF,MAAcC,MAAM,2BACzC,CACH,EAAKE,MAAMC,YACTR,EAAME,OAAOC,KAAKC,MAClBJ,EAAME,OAAOI,IAAIF,MACjB,EAAKP,MAAMC,SAEbE,EAAME,OAAOC,KAAKC,MAAQ,GAC1BJ,EAAME,OAAOI,IAAIF,MAAQ,GACzB,IAAIK,EAAQ,EAAKZ,MAAMC,QAEvB,EAAKY,SAAS,CAAEZ,QAASW,Q,uDAK3B,OACE,0BAAME,SAAUC,KAAKb,gBAAiBc,UAAU,aAC9C,gDACA,yBAAKA,UAAU,cACb,2BAAOC,IAAI,QAAX,QACA,2BAAOC,KAAK,OAAOZ,KAAK,OAAOU,UAAU,kBAE3C,yBAAKG,MAAM,cACT,2BAAOF,IAAI,OAAX,OACA,2BAAOC,KAAK,OAAOZ,KAAK,MAAMU,UAAU,kBAE1C,4BAAQA,UAAU,kBAAkBE,KAAK,UAAzC,e,GAnC0BE,cCAbC,E,uKAET,IAAD,OACP,OAAuC,IAAnCN,KAAKL,MAAMY,aAAaC,OACnB,8BAGL,yBAAKP,UAAU,aACb,6CACA,2BAAOA,UAAU,SACf,+BACE,4BACE,oCACA,mCACA,wCAGJ,+BACGD,KAAKL,MAAMY,aAAaE,KAAI,SAACC,GAC5B,OACE,wBAAIC,IAAKD,EAASE,IAChB,gCAAMF,EAASnB,KAAf,KACA,gCAAMmB,EAAShB,IAAf,KACA,4BACE,4BAAQO,UAAU,kBAAkBY,QAAS,kBAAM,EAAKlB,MAAMmB,aAAaJ,EAASE,MAApF,sB,GAxBaP,aCoCpBU,E,4MAjCb9B,MAAQ,CACN+B,UAAW,I,EAGbC,mBAAqB,SAAC1B,EAAMG,EAAKkB,GAC/B,IAAMM,EAAM,CACV3B,KAAMA,EACNG,IAAKA,EACLkB,GAAIA,GAEFO,EAAG,YAAO,EAAKlC,MAAM+B,WACzBG,EAAIC,KAAKF,GACT,EAAKpB,SAAS,CACZkB,UAAWG,K,EAIfE,oBAAsB,SAACT,GACrB,IAAIU,EAAQ,EAAKrC,MAAM+B,UAAUO,WAAU,SAAAL,GAAG,OAAIA,EAAIN,KAAOA,KACzDY,EAAW,EAAKvC,MAAM+B,UAC1BQ,EAASC,OAAOH,EAAO,GACvB,EAAKxB,SAAS,CAACkB,UAAWQ,K,uDAI1B,OACE,6BACE,kBAAC,EAAD,CAAOjB,aAAcP,KAAKf,MAAM+B,UAAWF,aAAcd,KAAKqB,sBAC9D,kBAAC,EAAD,CAAMzB,YAAaI,KAAKiB,0B,GA7BdZ,aCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,wBAAIhC,UAAU,uBAAd,iBACA,6BACA,kBAAC,EAAD,OAEFiC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b62ef215.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport default class Form extends Component {\n  state = {\n    counter: 1,\n  };\n\n  onSubmitHandler = (event) => {\n    event.preventDefault();\n    if (event.target.name.value === '') alert('Name Cannot be Empty');\n    else if (event.target.job.value === '') alert('Job Cannot be Empty');\n    else {\n      this.props.changeValue(\n        event.target.name.value,\n        event.target.job.value,\n        this.state.counter\n      );\n      event.target.name.value = '';\n      event.target.job.value = '';\n      let count = this.state.counter;\n\n      this.setState({ counter: count++ });\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmitHandler} className='container'>\n        <h3>Add new Employee</h3>\n        <div className='form-group'>\n          <label for='name'>Name</label>\n          <input type='text' name='name' className='form-control'></input>\n        </div>\n        <div class='form-group'>\n          <label for='job'>Job</label>\n          <input type='text' name='job' className='form-control'></input>\n        </div>\n        <button className='btn btn-primary' type='submit'>\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport default class Table extends Component {\n\n  render() {\n    if (this.props.employeeList.length === 0) {\n      return <div></div>;\n    } else {\n      return (\n        <div className='container'>\n          <h3>Employee Data</h3>\n          <table className='table'>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Job</th>\n                <th>Remove</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.employeeList.map((employee) => {\n                return (\n                  <tr key={employee.id}>\n                    <td> {employee.name} </td>\n                    <td> {employee.job} </td>\n                    <td>\n                      <button className='btn btn-primary' onClick={() => this.props.deleteHandle(employee.id)}>Delete</button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form/Form';\nimport Table from './components/Table/Table';\n\nclass App extends Component {\n  state = {\n    employees: [],\n  };\n\n  submitValueHandler = (name, job, id) => {\n    const emp = {\n      name: name,\n      job: job,\n      id: id,\n    };\n    let arr = [...this.state.employees];\n    arr.push(emp);\n    this.setState({\n      employees: arr,\n    });\n  };\n\n  deleteButtonHandler = (id) => {\n    let index = this.state.employees.findIndex(emp => emp.id === id);\n    let empArray = this.state.employees;\n    empArray.splice(index, 1);\n    this.setState({employees: empArray});\n  }\n\n  render() {\n    return (\n      <div>\n        <Table employeeList={this.state.employees} deleteHandle={this.deleteButtonHandler}/>\n        <Form changeValue={this.submitValueHandler} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1 className='display-3 container'>Employee Info</h1>\n    <hr></hr>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}